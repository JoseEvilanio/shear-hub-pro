# Pipeline Principal de CI/CD
# Sistema de Gest√£o de Oficina Mec√¢nica de Motos

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # An√°lise de c√≥digo e testes unit√°rios
  test:
    name: Tests and Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci
    
    - name: Run linting
      run: |
        cd ${{ matrix.service }}
        npm run lint
    
    - name: Run type checking
      if: matrix.service == 'frontend'
      run: |
        cd ${{ matrix.service }}
        npm run type-check
    
    - name: Run unit tests
      run: |
        cd ${{ matrix.service }}
        npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ${{ matrix.service }}

  # Build das imagens Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build Backend
    - name: Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    # Build Frontend
    - name: Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Testes de seguran√ßa
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'oficina-motos'
        path: '.'
        format: 'ALL'
    
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Deploy para staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://oficina-motos-staging.vercel.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Deploy Backend para Railway (Staging)
    - name: Deploy Backend to Railway
      uses: railway-deploy/railway-deploy@v1
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        service: backend
        environment: staging
    
    # Deploy Frontend para Vercel (Staging)
    - name: Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
        working-directory: ./frontend
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: oficina-motos-staging.vercel.app
    
    # Executar testes de fuma√ßa no staging
    - name: Run smoke tests on staging
      run: |
        cd frontend
        npm ci
        npx cypress run \
          --spec "cypress/e2e/smoke/**/*" \
          --config baseUrl=https://oficina-motos-staging.vercel.app
      env:
        CYPRESS_apiUrl: https://oficina-motos-backend-staging.railway.app/api

  # Deploy para produ√ß√£o
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://oficina-motos.vercel.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Deploy Backend para Railway (Production)
    - name: Deploy Backend to Railway
      uses: railway-deploy/railway-deploy@v1
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: backend
        environment: production
    
    # Aguardar backend estar online
    - name: Wait for backend to be ready
      run: |
        timeout 300 bash -c 'until curl -f https://oficina-motos-backend.railway.app/health; do sleep 5; done'
    
    # Deploy Frontend para Vercel (Production)
    - name: Deploy Frontend to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    # Executar testes de fuma√ßa em produ√ß√£o
    - name: Run smoke tests on production
      run: |
        cd frontend
        npm ci
        npx cypress run \
          --spec "cypress/e2e/smoke/**/*" \
          --config baseUrl=https://oficina-motos.vercel.app
      env:
        CYPRESS_apiUrl: https://oficina-motos-backend.railway.app/api
    
    # Notificar sucesso do deploy
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Deploy para produ√ß√£o realizado com sucesso!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()
    
    # Notificar falha do deploy
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Falha no deploy para produ√ß√£o!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()

  # Backup autom√°tico ap√≥s deploy
  backup:
    name: Database Backup
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Create database backup
      run: |
        # Criar backup do banco de produ√ß√£o
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql"}' \
          https://backboard.railway.app/graphql/v2
    
    - name: Upload backup to S3
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Sync backup to S3
      run: |
        aws s3 cp backup-*.sql s3://oficina-motos-backups/$(date +%Y/%m/%d)/

  # Monitoramento p√≥s-deploy
  monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Health check
      run: |
        # Verificar sa√∫de da aplica√ß√£o
        curl -f https://oficina-motos-backend.railway.app/health
        curl -f https://oficina-motos.vercel.app
    
    - name: Performance check
      run: |
        # Executar teste de performance com Lighthouse
        npm install -g lighthouse
        lighthouse https://oficina-motos.vercel.app \
          --output=json \
          --output-path=./lighthouse-report.json \
          --chrome-flags="--headless --no-sandbox"
        
        # Verificar se performance est√° aceit√°vel
        node -e "
          const report = require('./lighthouse-report.json');
          const performance = report.lhr.categories.performance.score * 100;
          if (performance < 80) {
            console.error('Performance score too low:', performance);
            process.exit(1);
          }
          console.log('Performance score:', performance);
        "
    
    - name: Setup monitoring alerts
      run: |
        # Configurar alertas no Grafana/Prometheus
        echo "Setting up monitoring alerts..."