// Badge de Notificações para Header
// Sistema de Gestão de Oficina Mecânica de Motos

import React, { useState, useRef, useEffect } from 'react';
import { useNotifications } from '@/hooks/useNotifications';
import { Notification } from '@/services/notificationService';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import {
  Bell,
  BellRing,
  Check,
  CheckCheck,
  Trash2,
  Settings,
  ExternalLink,
  X,
} from 'lucide-react';

interface NotificationBadgeProps {\n  onOpenCenter?: () => void;\n}\n\nexport const NotificationBadge: React.FC<NotificationBadgeProps> = ({\n  onOpenCenter,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showAll, setShowAll] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const {\n    notifications,\n    stats,\n    loading,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    formatRelativeTime,\n    getTypeColor,\n    getTypeIcon,\n  } = useNotifications();\n\n  // Fechar dropdown ao clicar fora\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const unreadNotifications = notifications.filter(n => !n.isRead);\n  const recentNotifications = showAll \n    ? notifications.slice(0, 10) \n    : notifications.slice(0, 5);\n\n  const handleNotificationClick = (notification: Notification) => {\n    if (!notification.isRead) {\n      markAsRead(notification.id);\n    }\n    \n    if (notification.actionUrl) {\n      window.open(notification.actionUrl, '_blank');\n    }\n    \n    setIsOpen(false);\n  };\n\n  const handleMarkAllAsRead = async () => {\n    await markAllAsRead();\n    setIsOpen(false);\n  };\n\n  const handleOpenCenter = () => {\n    setIsOpen(false);\n    onOpenCenter?.();\n  };\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {/* Badge Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 rounded-lg\"\n      >\n        {unreadNotifications.length > 0 ? (\n          <BellRing className=\"w-6 h-6\" />\n        ) : (\n          <Bell className=\"w-6 h-6\" />\n        )}\n        \n        {/* Contador de não lidas */}\n        {unreadNotifications.length > 0 && (\n          <span className=\"absolute -top-1 -right-1 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full\">\n            {unreadNotifications.length > 99 ? '99+' : unreadNotifications.length}\n          </span>\n        )}\n      </button>\n\n      {/* Dropdown */}\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\n          {/* Header do Dropdown */}\n          <div className=\"p-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-medium text-gray-900\">\n                Notificações\n              </h3>\n              \n              <div className=\"flex items-center space-x-2\">\n                {unreadNotifications.length > 0 && (\n                  <button\n                    onClick={handleMarkAllAsRead}\n                    className=\"text-sm text-primary-600 hover:text-primary-700 font-medium\"\n                  >\n                    Marcar todas como lidas\n                  </button>\n                )}\n                \n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            {stats && (\n              <div className=\"mt-2 flex items-center space-x-4 text-sm text-gray-500\">\n                <span>{stats.total} total</span>\n                {stats.unread > 0 && (\n                  <span className=\"text-red-600 font-medium\">\n                    {stats.unread} não lidas\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Lista de Notificações */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <LoadingSpinner size=\"sm\" />\n              </div>\n            ) : recentNotifications.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Bell className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">Nenhuma notificação</p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {recentNotifications.map((notification) => {\n                  const icon = getTypeIcon(notification.type);\n                  \n                  return (\n                    <div\n                      key={notification.id}\n                      className={`p-4 hover:bg-gray-50 cursor-pointer transition-colors ${\n                        !notification.isRead ? 'bg-blue-50' : ''\n                      }`}\n                      onClick={() => handleNotificationClick(notification)}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        {/* Ícone */}\n                        <div className={`p-1 rounded-lg ${getTypeColor(notification.type)} flex-shrink-0`}>\n                          <span className=\"text-sm\">{icon}</span>\n                        </div>\n\n                        {/* Conteúdo */}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <p className={`text-sm font-medium ${\n                                !notification.isRead ? 'text-gray-900' : 'text-gray-700'\n                              }`}>\n                                {notification.title}\n                              </p>\n                              <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                                {notification.message}\n                              </p>\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                {formatRelativeTime(notification.createdAt)}\n                              </p>\n                            </div>\n\n                            {/* Indicador de não lida */}\n                            {!notification.isRead && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 mt-2\"></div>\n                            )}\n                          </div>\n\n                          {/* Ações rápidas */}\n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            {notification.actionUrl && (\n                              <span className=\"inline-flex items-center text-xs text-primary-600\">\n                                <ExternalLink className=\"w-3 h-3 mr-1\" />\n                                Ver detalhes\n                              </span>\n                            )}\n                            \n                            {notification.priority === 'urgent' && (\n                              <span className=\"inline-flex items-center px-2 py-1 text-xs font-medium text-red-600 bg-red-50 rounded-full\">\n                                Urgente\n                              </span>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Ações */}\n                        <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                          {!notification.isRead && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                markAsRead(notification.id);\n                              }}\n                              className=\"p-1 text-gray-400 hover:text-blue-600\"\n                              title=\"Marcar como lida\"\n                            >\n                              <Check className=\"w-3 h-3\" />\n                            </button>\n                          )}\n                          \n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              deleteNotification(notification.id);\n                            }}\n                            className=\"p-1 text-gray-400 hover:text-red-600\"\n                            title=\"Excluir\"\n                          >\n                            <Trash2 className=\"w-3 h-3\" />\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n\n          {/* Footer do Dropdown */}\n          {recentNotifications.length > 0 && (\n            <div className=\"p-4 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center justify-between\">\n                {notifications.length > 5 && (\n                  <button\n                    onClick={() => setShowAll(!showAll)}\n                    className=\"text-sm text-primary-600 hover:text-primary-700 font-medium\"\n                  >\n                    {showAll ? 'Mostrar menos' : `Ver mais (${notifications.length - 5})`}\n                  </button>\n                )}\n                \n                <button\n                  onClick={handleOpenCenter}\n                  className=\"flex items-center text-sm text-primary-600 hover:text-primary-700 font-medium\"\n                >\n                  <Settings className=\"w-4 h-4 mr-1\" />\n                  Centro de Notificações\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};