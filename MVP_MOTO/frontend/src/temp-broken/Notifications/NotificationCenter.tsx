// Centro de Notificações
// Sistema de Gestão de Oficina Mecânica de Motos

import React, { useState } from 'react';
import { useNotifications } from '@/hooks/useNotifications';
import { NotificationList } from './NotificationList';
import { NotificationStatsComponent } from './NotificationStats';
import { NotificationSettingsComponent } from './NotificationSettings';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import {
  Bell,
  Settings,
  BarChart3,
  List,
  Wifi,
  WifiOff,
  RefreshCw,
} from 'lucide-react';

type TabType = 'list' | 'stats' | 'settings';

export const NotificationCenter: React.FC = () => {
  const [activeTab, setActiveTab] = useState<TabType>('list');\n  const {\n    // Estados\n    notifications,\n    stats,\n    settings,\n    loading,\n    statsLoading,\n    settingsLoading,\n    pagination,\n    error,\n    isConnected,\n    \n    // Ações de carregamento\n    loadNotifications,\n    loadStats,\n    loadSettings,\n    \n    // Ações de notificação\n    createNotification,\n    markAsRead,\n    markAsUnread,\n    markAllAsRead,\n    deleteNotification,\n    deleteAllRead,\n    \n    // Configurações\n    updateSettings,\n    \n    // WebSocket\n    connectWebSocket,\n    disconnectWebSocket,\n    \n    // Push notifications\n    requestPushPermission,\n    \n    // Utilitários\n    formatType,\n    formatCategory,\n    formatPriority,\n    getTypeColor,\n    getPriorityColor,\n    getTypeIcon,\n    isExpired,\n    isScheduled,\n    formatDateTime,\n    formatRelativeTime,\n  } = useNotifications();\n\n  const handleRefresh = async () => {\n    await Promise.all([\n      loadNotifications(),\n      loadStats(),\n      loadSettings(),\n    ]);\n  };\n\n  const handleFiltersChange = (filters: any) => {\n    loadNotifications(filters);\n  };\n\n  const tabs = [\n    {\n      id: 'list' as TabType,\n      label: 'Notificações',\n      icon: List,\n      count: notifications.length,\n    },\n    {\n      id: 'stats' as TabType,\n      label: 'Estatísticas',\n      icon: BarChart3,\n      count: stats?.total || 0,\n    },\n    {\n      id: 'settings' as TabType,\n      label: 'Configurações',\n      icon: Settings,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Bell className=\"w-6 h-6 text-primary-600\" />\n              <h1 className=\"text-xl font-semibold text-gray-900\">\n                Centro de Notificações\n              </h1>\n              \n              {/* Status de Conexão */}\n              <div className=\"flex items-center space-x-2\">\n                {isConnected ? (\n                  <div className=\"flex items-center space-x-1 text-green-600\">\n                    <Wifi className=\"w-4 h-4\" />\n                    <span className=\"text-xs font-medium\">Conectado</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-1 text-red-600\">\n                    <WifiOff className=\"w-4 h-4\" />\n                    <span className=\"text-xs font-medium\">Desconectado</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Botão de Refresh */}\n              <button\n                onClick={handleRefresh}\n                disabled={loading || statsLoading || settingsLoading}\n                className=\"flex items-center px-3 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${(loading || statsLoading || settingsLoading) ? 'animate-spin' : ''}`} />\n                Atualizar\n              </button>\n\n              {/* Indicador de Notificações Não Lidas */}\n              {stats && stats.unread > 0 && (\n                <div className=\"flex items-center px-3 py-2 bg-red-100 text-red-700 rounded-lg\">\n                  <Bell className=\"w-4 h-4 mr-2\" />\n                  <span className=\"text-sm font-medium\">\n                    {stats.unread} não lidas\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <nav className=\"flex space-x-8\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              const isActive = activeTab === tab.id;\n              \n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    isActive\n                      ? 'border-primary-500 text-primary-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4 mr-2\" />\n                  {tab.label}\n                  {tab.count !== undefined && (\n                    <span className={`ml-2 px-2 py-1 text-xs rounded-full ${\n                      isActive\n                        ? 'bg-primary-100 text-primary-600'\n                        : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {tab.count}\n                    </span>\n                  )}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n\n      {/* Conteúdo */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {error && (\n          <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-red-800\">\n                  Erro ao carregar dados\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700\">\n                  <p>{error}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Conteúdo das Tabs */}\n        {activeTab === 'list' && (\n          <NotificationList\n            notifications={notifications}\n            loading={loading}\n            onMarkAsRead={markAsRead}\n            onMarkAsUnread={markAsUnread}\n            onMarkAllAsRead={markAllAsRead}\n            onDelete={deleteNotification}\n            onDeleteAllRead={deleteAllRead}\n            onFiltersChange={handleFiltersChange}\n            formatType={formatType}\n            formatCategory={formatCategory}\n            formatPriority={formatPriority}\n            getTypeColor={getTypeColor}\n            getPriorityColor={getPriorityColor}\n            formatRelativeTime={formatRelativeTime}\n            isExpired={isExpired}\n          />\n        )}\n\n        {activeTab === 'stats' && (\n          <NotificationStatsComponent\n            stats={stats}\n            loading={statsLoading}\n            formatType={formatType}\n            formatCategory={formatCategory}\n            formatPriority={formatPriority}\n            getTypeColor={getTypeColor}\n            getPriorityColor={getPriorityColor}\n          />\n        )}\n\n        {activeTab === 'settings' && (\n          <NotificationSettingsComponent\n            settings={settings}\n            loading={settingsLoading}\n            onSave={updateSettings}\n            onRequestPushPermission={requestPushPermission}\n          />\n        )}\n      </div>\n    </div>\n  );\n};